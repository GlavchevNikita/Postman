{
	"info": {
		"_postman_id": "01518b4e-d9a5-4851-a744-c6c5bbbc92e7",
		"name": "Postman_HW2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "20975846"
	},
	"item": [
		{
			"name": "first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 2. Статус код 200\r",
							"pm.test('Status cod 200'), function() {\r",
							"    pm.response.to.have.status(200);\r",
							"}\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"  pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"// // 3. Проверить, что в body приходит правильный string.\r",
							"pm.test(\"Body contains string\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test('Status code is 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age\r",
							"let salary = jsonData.salary\r",
							"\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"pm.test('Chek name', function(){\r",
							"    pm.expect(name).to.eql(pm.environment.get(\"name\"))\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"pm.test('Check age', function(){\r",
							"    pm.expect(age).to.eql(pm.environment.get(\"age\"))\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"pm.test('Check salary', function(){\r",
							"    pm.expect(salary).to.eql(+pm.environment.get(\"salary\"))\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data \r",
							"\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test('Check name', function(){\r",
							"    pm.expect(name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Check age', function(){\r",
							"    pm.expect(age).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Check salary', function(){\r",
							"    pm.expect(salary).to.eql(+req_salary)\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"let family_user = jsonData.family\r",
							"console.log(family_user)\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"let u_salary_1_5 = req.salary*4;\r",
							"\r",
							"pm.test('Check u_salary_1_5_year', function(){\r",
							"    pm.expect(family_user.u_salary_1_5_year).to.eql(u_salary_1_5)\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Nikita",
							"type": "text"
						},
						{
							"key": "age",
							"value": "25",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "3000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3?=&=&=",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					],
					"query": [
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						},
						{
							"key": "",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age\r",
							"let salary = jsonData.salary\r",
							"\r",
							"// // 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Check name_request', function(){\r",
							" pm.expect(name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Check age_request', function(){\r",
							" pm.expect(age).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Check age_request', function(){\r",
							" pm.expect(salary).to.eql(+req_salary)\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('Check dog', function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('Check dog_age', function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age')\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('Check name_Luky', function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky')\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test('Check age_4', function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nikita&age=25&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test('Status code is 200', function(){\r",
							"    pm.response.to.have.status(200)\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"let name = jsonData.name;\r",
							"let age = jsonData.age;\r",
							"let salary = jsonData.salary\r",
							"\r",
							"// 4. Спарсить request\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name;\r",
							"let req_age = req.age;\r",
							"let req_salary = req.salary\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Check name_request', function(){\r",
							" pm.expect(name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"pm.test('Check age_request', function(){\r",
							" pm.expect(age).to.eql(+req_age)\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"console.log(req_salary)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"console.log(salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"console.log(salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"console.log(salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"pm.test('Check salary_req', function(){\r",
							" pm.expect(salary[0]).to.eql(+req_salary)\r",
							"});\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"let req_salary1 = String(req_salary*2);\r",
							"pm.test('Check salary_req', function(){\r",
							" pm.expect(salary[1]).to.eql(req_salary1)\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"let req_salary2 = String(req_salary*3);\r",
							"pm.test('Check salary_req', function(){\r",
							" pm.expect(salary[2]).to.eql(req_salary2)\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"pm.environment.set('name' , req_name)\r",
							"\r",
							"// 16. Создать в окружении переменную age\r",
							"pm.environment.set('age' , req_age)\r",
							"\r",
							"// 17. Создать в окружении переменную salary\r",
							"pm.environment.set('salary' , req_salary)\r",
							"\r",
							"// 18. Передать в окружение переменную name\r",
							"// 19. Передать в окружение переменную age\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"for(i in salary){\r",
							"    console.log(salary[i]);\r",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let jsonData = pm.response.json()\r",
							"let name = jsonData.name\r",
							"let age = jsonData.age\r",
							"let salary = jsonData.salary\r",
							"\r",
							"// // 4. Спарсить request.\r",
							"let req = pm.request.url.query.toObject();\r",
							"let req_name = req.name\r",
							"let req_age = req.age\r",
							"let req_salary = req.salary\r",
							"\r",
							"\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"pm.test('Check name_request', function(){\r",
							" pm.expect(name).to.eql(req_name)\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"pm.test('Check age_request', function(){\r",
							" pm.expect(age).to.eql(req_age)\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"pm.test('Check age_request', function(){\r",
							" pm.expect(salary).to.eql(+req_salary)\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"let family = jsonData.family\r",
							"console.log(family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"pm.test('Check dog', function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('name')\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"pm.test('Check dog_age', function(){\r",
							"    pm.expect(jsonData.family.pets.dog).to.have.property('age')\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"pm.test('Check name_Luky', function(){\r",
							"    pm.expect(jsonData.family.pets.dog.name).to.eql('Luky')\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"pm.test('Check age_4', function(){\r",
							"    pm.expect(jsonData.family.pets.dog.age).to.eql(4)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Nikita&age=25&salary=3000",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Nikita"
						},
						{
							"key": "age",
							"value": "25"
						},
						{
							"key": "salary",
							"value": "3000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"// 6. Спарсить response body в json.\r",
							"let jsonData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"let req = request.data \r",
							"let req_salary = req.salary\r",
							"\r",
							"\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"pm.test(\"Test property start_qa_salary\", () => {\r",
							"  pm.expect(jsonData).to.have.property('start_qa_salary');\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"pm.test(\"Test property qa_salary_after_6_months\", () => {\r",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_6_months');\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"pm.test(\"Test property qa_salary_after_12_months\", () => {\r",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_12_months');\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"pm.test(\"Test property qa_salary_after_1.5_year\", () => {\r",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_1.5_year');\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"pm.test(\"Test property qa_salary_after_3.5_years.\", () => {\r",
							"  pm.expect(jsonData).to.have.property('qa_salary_after_3.5_years');\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"pm.test(\"Test property person\", () => {\r",
							"  pm.expect(jsonData).to.have.property('person');\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test request start_qa_salary\", function () {\r",
							"    pm.expect(jsonData.start_qa_salary).to.eql(+req_salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"let salary_after_6_months = Number(req.salary)*2;\r",
							"pm.test(\"Test request qa_salary_after_6_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_6_months).to.eql(salary_after_6_months);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"let qa_salary_after_12_months = Number(req.salary)*2.7;\r",
							"\r",
							"pm.test(\"Test qa_salary_after_12_months\", function () {\r",
							"    pm.expect(jsonData.qa_salary_after_12_months).to.eql(qa_salary_after_12_months);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"let salary_after_1_5_year = Number(req.salary)*3.3;\r",
							"\r",
							"pm.test(\"Test request qa_salary_after_1.5_year\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_1.5_year\"]).to.eql(salary_after_1_5_year);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"let qa_salary_after_3_5_years = Number(req.salary)*3.8;\r",
							"\r",
							"pm.test(\"Test request qa_salary_after_3.5_years\", function () {\r",
							"    pm.expect(jsonData[\"qa_salary_after_3.5_years\"]).to.eql(qa_salary_after_3_5_years);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"pm.test(\"Test request u_name\", function () {\r",
							"    pm.expect(jsonData.person.u_name[1]).to.eql(+req.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"pm.test(\"Test request u_age\", function () {\r",
							"    pm.expect(jsonData.person.u_age).to.eql(+req.age);\r",
							"});\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"let salary_5_years = Number(req.salary)*4.2;\r",
							"pm.test(\"Test request u_salary_5_years\", function () {\r",
							"    pm.expect(jsonData.person.u_salary_5_years).to.eql(salary_5_years);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"for(i in jsonData.person){\r",
							"    console.log(\"key:\", i, \"value:\", jsonData.person[i]);\r",
							"}\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					],
					"query": [
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						},
						{
							"key": "",
							"value": "",
							"disabled": true
						}
					]
				}
			},
			"response": []
		}
	]
}